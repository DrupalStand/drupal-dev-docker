***************
*** 355,373 ****
  
      $data = CalendarHelper::dateViewFields($this->entityType);
  
- //    $data['name'] = 'node_field_data.created_year';
      $date_fields = [];
      /** @var $handler \Drupal\views\Plugin\views\argument\Formula */
      foreach ($this->view->getDisplay()->getHandlers('argument') as $handler) {
        if ($handler instanceof Date) {
          // Strip "_calendar" from the field name.
          $fieldName = $handler->realField;
-         if (!empty($data['alias'][$handler->table . '_' . $fieldName])) {
-           $date_fields[$fieldName] = $data['alias'][$handler->table . '_' . $fieldName];
-           $this->dateFields = $date_fields;
-         }
          $this->dateArgument = $handler;
- 
        }
      }
  //
--- 355,373 ----
  
      $data = CalendarHelper::dateViewFields($this->entityType);
  
+     $data = $data['name'];
      $date_fields = [];
      /** @var $handler \Drupal\views\Plugin\views\argument\Formula */
      foreach ($this->view->getDisplay()->getHandlers('argument') as $handler) {
        if ($handler instanceof Date) {
          // Strip "_calendar" from the field name.
          $fieldName = $handler->realField;
+         $alias = $handler->table . '.' . $fieldName;
+         $info = $data[$alias];
+         $field_name  = str_replace(array('_value2', '_value'), '', $info['real_field_name']);
+         $date_fields[$field_name] = $info;
          $this->dateArgument = $handler;
+         $this->dateFields = $date_fields;
        }
      }
  //
***************
*** 386,396 ****
      /** @var \Drupal\calendar\CalendarDateInfo $dateInfo */
      $dateInfo = $this->dateArgument->view->dateInfo;
      $id = $row->_entity->id();
  
      if (!is_numeric($id)) {
        return [];
      }
  
      // There could be more than one date field in a view so iterate through all
      // of them to find the right values for this view result.
      foreach ($this->dateFields as $field_name => $info) {
--- 386,407 ----
      /** @var \Drupal\calendar\CalendarDateInfo $dateInfo */
      $dateInfo = $this->dateArgument->view->dateInfo;
      $id = $row->_entity->id();
+     $utc = new \DateTimeZone('UTC');
  
      if (!is_numeric($id)) {
        return [];
      }
  
+     // unrelated to end date: this addresses issue where an entity on a calendar is duplicated
+     // if it has multiple entity references; ensure that the calendar entity is only displayed once
+     static $used = '';
+     if ($id != $used) {
+       $used = $id;
+     }
+     else {
+       return [];
+     }
+ 
      // There could be more than one date field in a view so iterate through all
      // of them to find the right values for this view result.
      foreach ($this->dateFields as $field_name => $info) {
***************
*** 420,455 ****
        $entity->date_id = [];
        $item_start_date = NULL;
        $item_end_date   = NULL;
-       $granularity = 'second';
        $increment = 1;
  
        // @todo implement timezone support
-       if ($info['is_field']) {
-         // Should CalendarHelper::dateViewFields() be returning this already?
-         $entity_field_name = str_replace('_value', '', $field_name);
-         $datetime_type = $entity->getFieldDefinition($entity_field_name)->getSetting('datetime_type');
-         $storage_format = $datetime_type == 'date' ? DATETIME_DATE_STORAGE_FORMAT : DATETIME_DATETIME_STORAGE_FORMAT;
- //        $db_tz   = date_get_timezone_db($tz_handling, isset($item->$tz_field) ? $item->$tz_field : timezone_name_get($dateInfo->getTimezone()));
- //        $to_zone = date_get_timezone($tz_handling, isset($item->$tz_field)) ? $item->$tz_field : timezone_name_get($dateInfo->getTimezone());
- 
-         $item_start_date = \DateTime::createFromFormat($storage_format, $row->{$info['query_name']});
-         $item_end_date = \DateTime::createFromFormat($storage_format, $row->{$info['query_name']});
- 
-         // @todo don't hardcode
- //        $granularity = date_granularity_precision($cck_field['settings']['granularity']);
-         $granularity = 'week';
- //        $increment = $instance['widget']['settings']['increment'];
-       }
-       elseif ($entity->get($field_name)) {
          $item = $entity->get($field_name)->getValue();
-         // @todo handle timezones
- //        $db_tz   = date_get_timezone_db($tz_handling, isset($item->$tz_field) ? $item->$tz_field : timezone_name_get($dateInfo->getTimezone()));
- //        $to_zone = date_get_timezone($tz_handling, isset($item->$tz_field) ? $item->$tz_field : timezone_name_get($dateInfo->getTimezone()));
- //        $item_start_date = new dateObject($item, $db_tz);
-         $item_start_date = new \DateTime();
-         $item_start_date->setTimestamp($item[0]['value']);
-         $item_end_date   = $item_start_date;
-         $entity->date_id = ['calendar.' . $id . '.' . $field_name . '.0'];
        }
  
        // If we don't have a date value, go no further.
--- 431,465 ----
        $entity->date_id = [];
        $item_start_date = NULL;
        $item_end_date   = NULL;
+       $granularity = 'month';
        $increment = 1;
+       $timezone = NULL;
  
        // @todo implement timezone support
+       if ($entity->get($field_name)) {
          $item = $entity->get($field_name)->getValue();
+ 
+         // Handle timezone offset.
+         $timezone = new \DateTimeZone($item[0]['timezone']);
+         $item_start_date = new \DateTime($item[0]['value'], $utc);
+ 
+         // Re-create the start date with the correct timezone.
+         $temp_time = $item_start_date->getTimestamp();
+         $temp_time = date("c", $temp_time);
+         $item_start_date = new \DateTime($temp_time, $timezone);
+ 
+         if (!empty($item[0]['end_value'])) {
+           $item_end_date = new \DateTime($item[0]['value'], $utc);
+ 
+           // Re-create the end date with the correct timezone.
+           $temp_time = $item_end_date->getTimestamp();
+           $temp_time = date("c", $temp_time);
+           $item_end_date = new \DateTime($temp_time, $timezone);
+         }
+         else {
+           $item_end_date = $item_start_date;
+         }
+         $entity->date_id = array('calendar.' . $id . '.' . $field_name . '.0');
        }
  
        // If we don't have a date value, go no further.
***************
*** 457,470 ****
          continue;
        }
  
-       // Set the item date to the proper display timezone;
-       // @todo handle timezones
- //      $item_start_date->setTimezone(new dateTimezone($to_zone));
- //      $item_end_date->setTimezone(new dateTimezone($to_zone));
- 
        $event->setStartDate($item_start_date);
        $event->setEndDate($item_end_date);
-       $event->setTimezone(new \DateTimeZone(timezone_name_get($dateInfo->getTimezone())));
        $event->setGranularity($granularity);
  
        // @todo remove while properties get transfered to the new object
--- 467,476 ----
          continue;
        }
  
        $event->setStartDate($item_start_date);
        $event->setEndDate($item_end_date);
+       // $event->setTimezone(new \DateTimeZone(timezone_name_get($dateInfo->getTimezone())));
+       $event->setTimezone(isset($timezone) ? $timezone : $utc);
        $event->setGranularity($granularity);
  
        // @todo remove while properties get transfered to the new object
***************
*** 478,484 ****
  
        // All calendar row plugins should provide a date_id that the theme can use.
        // @todo implement
- //      $event_container->date_id = $entity->date_id[0];
  
        // We are working with an array of partially rendered items
        // as we process the calendar, so we can group and organize them.
--- 484,490 ----
  
        // All calendar row plugins should provide a date_id that the theme can use.
        // @todo implement
+       $event->date_id = $entity->date_id[0];
  
        // We are working with an array of partially rendered items
        // as we process the calendar, so we can group and organize them.
***************
*** 532,539 ****
      $rows = [];
  
      $dateInfo = $this->dateArgument->view->dateInfo;
- //    $item_start_date = $event->date_start;
- //    $item_end_date = $event->date_end;
  //    $to_zone = $event->to_zone;
  //    $db_tz = $event->db_tz;
  //    $granularity = $event->granularity;
--- 538,545 ----
      $rows = [];
  
      $dateInfo = $this->dateArgument->view->dateInfo;
+     $item_start_date = $event->getStartDate()->getTimestamp();
+     $item_end_date = $event->getEndDate()->getTimestamp();
  //    $to_zone = $event->to_zone;
  //    $db_tz = $event->db_tz;
  //    $granularity = $event->granularity;
***************
*** 544,551 ****
      // nodes so that we have a 'node' for each day that this item occupies in
      // this view.
      // @TODO make this work with the CalendarDateInfo object
- //    $now = max($dateInfo->min_zone_string, $this->dateFormatter->format($event->getStartDate()->getTimestamp(), 'Y-m-d'));
- //    $to = min($dateInfo->max_zone_string, $this->dateFormatter->format($event->getEndDate()->getTimestamp(), 'Y-m-d'));
      $now = $event->getStartDate()->format('Y-m-d');
      $to = $event->getEndDate()->format('Y-m-d');
      $next = new \DateTime();
--- 550,556 ----
      // nodes so that we have a 'node' for each day that this item occupies in
      // this view.
      // @TODO make this work with the CalendarDateInfo object
+ 
      $now = $event->getStartDate()->format('Y-m-d');
      $to = $event->getEndDate()->format('Y-m-d');
      $next = new \DateTime();
***************
*** 575,597 ****
        $end = $this->dateFormatter->format($next->getTimestamp(), 'custom', 'Y-m-d H:i:s');
  
        // Get start and end of item, formatted the same way.
-       $item_start = $this->dateFormatter->format($event->getStartDate()->getTimestamp(), 'custom', 'Y-m-d H:i:s');
-       $item_end = $this->dateFormatter->format($event->getEndDate()->getTimestamp(), 'custom', 'Y-m-d H:i:s');
  
        // Get intersection of current day and the node value's duration (as
        // strings in $to_zone timezone).
        $start_string = $item_start < $start ? $start : $item_start;
-       $entity->setStartDate(new \DateTime($start_string));
        $end_string = !empty($item_end) ? ($item_end > $end ? $end : $item_end) : NULL;
-       $entity->setEndDate(new \DateTime($end_string));
  
        // @TODO don't hardcode granularity and increment
-       $granularity = 'hour';
        $increment = 1;
        $entity->setAllDay(CalendarHelper::dateIsAllDay($entity->getStartDate()->format('Y-m-d H:i:s'), $entity->getEndDate()->format('Y-m-d H:i:s'), $granularity, $increment));
  
-       $calendar_start = new \DateTime();
-       $calendar_start->setTimestamp($entity->getStartDate()->getTimestamp());
  
  //      unset($entity->calendar_fields);
        if (isset($entity) && (empty($calendar_start))) {
--- 580,602 ----
        $end = $this->dateFormatter->format($next->getTimestamp(), 'custom', 'Y-m-d H:i:s');
  
        // Get start and end of item, formatted the same way.
+       $item_start = $this->dateFormatter->format($item_start_date, 'custom', 'Y-m-d H:i:s');
+       $item_end = $this->dateFormatter->format($item_end_date, 'custom', 'Y-m-d H:i:s');
  
        // Get intersection of current day and the node value's duration (as
        // strings in $to_zone timezone).
        $start_string = $item_start < $start ? $start : $item_start;
        $end_string = !empty($item_end) ? ($item_end > $end ? $end : $item_end) : NULL;
+       $entity->calendar_start_date = (new \DateTime($start_string));
+       $entity->calendar_end_date = (new \DateTime($end_string));
  
        // @TODO don't hardcode granularity and increment
+       $granularity = 'day';
        $increment = 1;
        $entity->setAllDay(CalendarHelper::dateIsAllDay($entity->getStartDate()->format('Y-m-d H:i:s'), $entity->getEndDate()->format('Y-m-d H:i:s'), $granularity, $increment));
  
+       $calendar_start = $this->dateFormatter->format($entity->calendar_start_date->getTimestamp(), 'custom', 'Y-m-d H:i:s');
+       $calendar_end = $this->dateFormatter->format($entity->calendar_end_date->getTimestamp(), 'custom', 'Y-m-d H:i:s');
  
  //      unset($entity->calendar_fields);
        if (isset($entity) && (empty($calendar_start))) {
***************
*** 600,612 ****
          unset($entity);
        }
        else {
- //        $entity->date_id .= '.' . $position;
          $rows[] = $entity;
          unset($entity);
        }
  
        $next->setTimestamp(strtotime('+1 second', $next->getTimestamp()));
-       $now = $this->dateFormatter->format($next->getTimestamp(), 'Y-m-d');
        $position++;
      }
      return $rows;
--- 605,617 ----
          unset($entity);
        }
        else {
+         $entity->date_id .= '.' . $position;
          $rows[] = $entity;
          unset($entity);
        }
  
        $next->setTimestamp(strtotime('+1 second', $next->getTimestamp()));
+       $now = $this->dateFormatter->format($next->getTimestamp(), 'custom', 'Y-m-d');
        $position++;
      }
      return $rows;
***************
*** 685,689 ****
      ];
    }
  
- 
  }
--- 690,693 ----
      ];
    }
  
  }
